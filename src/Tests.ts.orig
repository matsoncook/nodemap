function doTests() {
  //doTest1();
  //doTest2();
  doTest3();
}
function doTest1(): MercatorViewport {
  //TestsdoTest1()
  let testZoom = 2;
  let testMapProject = new MercatorWeb();
  let testViewport = new Viewport2d();
  let testViewportMercator: MercatorViewport = new MercatorViewport(
      testMapProject,
      testViewport,
      testZoom,
  );
  testViewport.canvasBounds.setBounds(512, 512);
  testViewportMercator.applyViewportMagnificationForZoom(testZoom);
  testViewport.viewPortCanvasMagnification.scale(0.95);

  let viewportPosition = new Point2d(180 / mercatorViewportPixel, 0);
  var canvasPosition = new Point2d(256, 256);
  testViewport.setCanvasPositionOfViewportCenter(
      viewportPosition,
      canvasPosition,
  );

  let gc = new GridCalculator(testViewportMercator);
  let tileBounds = gc.calculateGrid();
  return testViewportMercator;
}

function doTest2() {
  // let mapProject = new MercatorWeb();
  // var lat = mapProject.pixelsToLatDeg(128,zoom);
  // console.log("z2 lat at 128px",lat);
  //z2 lat at 128px 40.97989806962015
  /*
lat = mapProject.pixelsToLatDeg(256,zoom);
console.log("z2 lat at 256px",lat);
//lat at 256 66.51326044311188 zoom 2
lat = mapProject.pixelsToLatDeg(512,zoom);
console.log("z2 lat at 512px",lat);
//lat at 512 85.0511287798066

//This is kind of wrong
var viewportPosition = new Point2d(180 / mercatorViewportPixel,-90/ (mercatorViewportPixel));
*/
  /*
// to put map center a tile down at zoom level 2 (4 tiles) (map size 512x512)
let x = mapProject.latDegToPixels(66.51326044311188,zoom);
var viewportPosition = new Point2d(180 / mercatorViewportPixel,-x/zoom);
*/
  //this.viewport: _canvasBounds:(x=0, y=0, sizeX=512, sizeY=512), _viewPortCanvasMagnification:Point(x=0.4018775720164611, y=0.4018775720164611), _canvasPositionOfViewportCenter:Point(x=-388.4424746666666, y=254.3598826666668))
  // viewport.viewPortCanvasMagnification.set2(0.06490547151887452, 0.06490547151887452);
  // viewport.canvasPositionOfViewportCenter.set2(-2936.5758251383163, -797.048546367439)
  //this.viewport: _canvasBounds:(x=0, y=0, sizeX=2160, sizeY=399), _viewPortCanvasMagnification:Point(x=0.06490547151887452, y=0.06490547151887452), _canvasPositionOfViewportCenter:Point(x=-2936.5758251383163, y=-797.048546367439))
  // viewport.viewPortCanvasMagnification.set2(0.007279580562775083, 0.007279580562775083);
  // viewport.canvasPositionOfViewportCenter.set2(-32885.035985341856, -9258.080997512228);
  // this.viewport: _canvasBounds:(x=0, y=0, sizeX=1585, sizeY=431), _viewPortCanvasMagnification:Point(x=0.007279580562775083, y=0.007279580562775083), _canvasPositionOfViewportCenter:Point(x=-32885.035985341856, y=-9258.080997512228))
  //viewportMercator.applyViewportMagnificationForZoom(zoom);
}

function doTest3(): MercatorViewport {
  //TestsdoTest1()
  let testZoom = 3;
  let testMapProject = new MercatorWeb();
  let testViewport = new Viewport2d();
  let testViewportMercator: MercatorViewport = new MercatorViewport(
      testMapProject,
      testViewport,
      testZoom,
  );
  testViewport.canvasBounds.setBounds(512, 512);
  testViewportMercator.applyViewportMagnificationForZoom(testZoom);
  testViewport.viewPortCanvasMagnification.scale(0.95);

  let viewportPosition = new Point2d(180 / mercatorViewportPixel, 0);
  var canvasPosition = new Point2d(256, 256);
  testViewport.setCanvasPositionOfViewportCenter(
      viewportPosition,
      canvasPosition,
  );

  let gc = new GridCalculator(testViewportMercator);
  let tileBounds = gc.calculateGrid();
  return testViewportMercator;
}

//GridCalcTests
/*
tests() {

    this.test1();
    this.test2();
    this.test3();
}

test1()
{
    let zoom = this.mercatorViewport.zoom;
    let grid_count = Math.pow(2,zoom);
    this.viewport.canvasBounds.setFromTo(0,0,1000,500);
    this.viewport.canvasPositionOfViewportCenter.set2(500,250);
    //this.viewport.viewPortCanvasMagnification.set2(1,1);
    this.viewport.viewPortCanvasMagnification.set2(0.5,0.5);
    this.viewport.calculateViewportCanvasBounds();
    //this.calculateGrid();
    console.log("Grid Calculator test: bounds:" + this.viewport.viewportCanvasBounds);
}
test2()
{
    let zoom = this.mercatorViewport.zoom;
    let grid_count = Math.pow(2,zoom);
    this.viewport.canvasBounds.setFromTo(0,0,512,512);
    this.viewport.canvasPositionOfViewportCenter.set2(256,256);
    //this.viewport.viewPortCanvasMagnification.set2(1,1);
    this.viewport.viewPortCanvasMagnification.set2(0.5,0.5);
    this.viewport.calculateViewportCanvasBounds();
    //this.calculateGrid();
    console.log("Grid Calculator test: bounds:" + this.viewport.viewportCanvasBounds);


    let b = this.viewport.viewportCanvasBounds;
    //this.mercatorViewport.zoo
    let lonFrom = this.mercatorViewport.viewportToLonDeg(b.x);
    let lonTo = this.mercatorViewport.viewportToLonDeg(b.x1);


    let latFrom = this.mercatorViewport.viewportToLatDeg(b.y) ;
    let latTo = this.mercatorViewport.viewportToLatDeg(b.y1) ;

    console.log(`lonFrom ${lonFrom}, ${lonTo}`);
    console.log(`latFrom ${latFrom}, ${latTo}`);
}
test3()
{
    let zoom = 2;

    let grid_count = Math.pow(2,zoom);
    this.viewport.canvasBounds.setFromTo(0,0,512,512);
    this.viewport.canvasPositionOfViewportCenter.set2(256,256);
    //this.viewport.viewPortCanvasMagnification.set2(1,1);
    let zoomLevel = 360.0/512.0;
    //this.viewport.viewPortCanvasMagnification.set2(0.9,0.9);
    //this.viewport.viewPortCanvasMagnification.set2(1,1);
    this.viewport.viewPortCanvasMagnification.set2(zoomLevel*zoomLevel-0.01,zoomLevel*zoomLevel-0.01);
    this.viewport.calculateViewportCanvasBounds();
    //this.calculateGrid();
    console.log("Grid Calculator test: bounds:" + this.viewport.viewportCanvasBounds);


    let b = this.viewport.viewportCanvasBounds;
    //this.mercatorViewport.zoo
    let lonFrom = this.mercatorViewport.viewportToLonDeg(b.x);
    let lonTo = this.mercatorViewport.viewportToLonDeg(b.x1);


    let latFrom = this.mercatorViewport.viewportToLatDeg(b.y) ;
    let latTo = this.mercatorViewport.viewportToLatDeg(b.y1) ;

    console.log(`lonFrom ${lonFrom}, ${lonTo}`);
    console.log(`latFrom ${latFrom}, ${latTo}`);

    let tileXFrom = this.lonToTileX(lonFrom,zoom,grid_count,256);
    let tileXTo = this.lonToTileX(lonTo,zoom,grid_count,256);

    let tileYFrom = this.latToTileY(latFrom, zoom, grid_count, 256) || 0;
    let tileYTo = this.latToTileY(latTo, zoom, grid_count, 256) || grid_count - 1;

    console.log(`tileX ${tileXFrom}, ${tileXTo}`);
    console.log(`tileY ${tileYFrom}, ${tileYTo}`);
}
    */